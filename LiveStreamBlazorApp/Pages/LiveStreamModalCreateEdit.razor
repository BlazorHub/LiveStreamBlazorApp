<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">@ModalTitle</h3>
                <button type="button" class="close" @onclick="@CloseModal">
                    <span aria-hidden="true">X</span>
                </button>
            </div>
            <EditForm Model="@liveStream" OnValidSubmit="@SubmitLiveStream">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Title</label>
                        <InputText class="form-control" @bind-Value="liveStream.Title" placeholder="Live: Company TownHall 2020" />
                        <ValidationMessage For="@(()=>liveStream.Title)" />
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea class="form-control" @bind-Value="liveStream.Description" placeholder="Regarding the new implentation of policy 1880 the HR department will address the following issues: " />
                        <ValidationMessage For="@(() => liveStream.Description)" />
                    </div>
                    <div class="form-group">
                        <label>Url</label>
                        <InputText class="form-control" @bind-Value="liveStream.Url" placeholder="http://www.mystreamurl/live/townhall2020.m3u8" />
                        <ValidationMessage For="@(() => liveStream.Url)" />
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-info" type="submit">Save</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>




@code{

    [Inject]
    protected HttpClient http { get; set; }

    protected LiveStream liveStream = new LiveStream();

    [Parameter]
    public string ModalTitle { get; set; }

    [Parameter]
    public EventCallback<string> OnCloseModal { get; set; }

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    protected async Task SubmitLiveStream()
    {
        var response = await http.PostJsonAsync<LiveStream>("https://localhost:44354/api/livestreams", liveStream);
        Debug.WriteLine(response.ToString());
        OnSubmit();
    }


    protected void CloseModal()
    {
        if(OnCloseModal.HasDelegate == true)
        {
            OnCloseModal.InvokeAsync("Add Live Stream Cancelled");
        }
    }

    protected void OnSubmit()
    {
        if (OnCloseModal.HasDelegate == true)
        {
            OnCloseModal.InvokeAsync("Submitted");
        }
    }



}

